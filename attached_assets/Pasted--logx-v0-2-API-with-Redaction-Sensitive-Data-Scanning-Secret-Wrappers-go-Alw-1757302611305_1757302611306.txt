# üìñ `logx` v0.2 API (with Redaction & Sensitive Data Scanning)

## üîë Secret Wrappers

```go
// Always renders as [REDACTED] when logged, JSON-encoded, or fmt.Stringer-ed.
func SecretString(s string) SecretString
func SecretBytes(b []byte) SecretBytes
```

### Example

```go
logx.Info("user registered", "email", logx.SecretString("fizer@company.com"))
```

‚úÖ Output

```json
{
  "msg": "user registered",
  "email": "[REDACTED]"
}
```

---

## üéõÔ∏è Global Configuration

```go
// Enable or disable message scanning for sensitive data (default: true)
func EnableMessageRedaction(enabled bool)

// Replace all matches in msg with "[REDACTED]" before logging.
func AddMessageRedactor(fn func(msg string) string)

// Apply redaction for fields matching these keys.
func AddKeyRedactor(keys ...string)

// Apply regex-based redaction across both fields and messages.
func AddRegexRedactor(patterns ...string)

// Add a custom field redactor (returns safe value).
func AddCustomRedactor(fn func(key string, val any) any)
```

---

## üß∞ Masking Helpers

```go
// Recursively mask sensitive fields in maps/structs.
func Mask(data map[string]any, sensitiveKeys []string) map[string]any
```

---

## üõ°Ô∏è Default Redactors (auto-enabled)

`logx` ships with built-in detectors for common sensitive data:

* **Credit Card Numbers** ‚Üí `[REDACTED]`
* **Social Security Numbers (SSN)** ‚Üí `[REDACTED]`
* **API Keys / Tokens** ‚Üí `[REDACTED]`
* **Emails** ‚Üí `[REDACTED]`
* **AWS Access Keys** ‚Üí `[REDACTED]`
* **Private Keys (PEM)** ‚Üí `[REDACTED]`

---

## ‚úÖ Usage Examples

### 1. Field Redaction

```go
logx.AddKeyRedactor("password", "token")

logx.Info("user login", "username", "fizer", "password", "abcd1234")
```

Output

```json
{
  "msg": "user login",
  "username": "fizer",
  "password": "[REDACTED]"
}
```

---

### 2. Message Redaction

```go
logx.EnableMessageRedaction(true)

logx.Info("Login attempt with password=abcd1234")
```

Output

```json
{
  "msg": "Login attempt with password=[REDACTED]"
}
```

---

### 3. Regex Redactor

```go
logx.AddRegexRedactor(`(?i)apikey=[A-Za-z0-9-_]+`)

logx.Warn("API call failed: apikey=SECRET1234")
```

Output

```json
{
  "msg": "API call failed: apikey=[REDACTED]"
}
```

---

### 4. Custom Redactor

```go
logx.AddCustomRedactor(func(key string, val any) any {
    if key == "ssn" {
        return "[MASKED-SSN]"
    }
    return val
})

logx.Info("ssn data", "ssn", "123-45-6789")
```

Output

```json
{
  "msg": "ssn data",
  "ssn": "[MASKED-SSN]"
}
```

---

### 5. Mask Helper

```go
user := map[string]any{
    "username": "fizer",
    "password": "mypassword",
}

logx.Info("new user", "data", logx.Mask(user, []string{"password"}))
```

Output

```json
{
  "msg": "new user",
  "data": {"username":"fizer","password":"[REDACTED]"}
}
```

---

Absolutely ‚úÖ ‚Äî for **local testing / dev debugging**, you might *want to see raw values*.
In prod/staging ‚Üí secrets must be redacted.

We can solve this with a **global toggle** + **per-logger override**.

---

## üîß API Additions for Local Testing

```go
// Global control (applies everywhere)
func EnableRedaction(enabled bool)

// Per-logger override
func (l *Logger) WithRedaction(enabled bool) *Logger
```

---


## üîç Example ‚Äì Local Testing (redaction disabled)

```go
func main() {
    logx.EnableRedaction(false) // allow secrets in logs (local only!)

    logx.Info("Testing API call", "apikey", "SECRET1234")
}
```

‚úÖ Output (local mode)

```json
{
  "msg": "Testing API call",
  "apikey": "SECRET1234"
}
```

---

## üöÄ Example ‚Äì Production (redaction enabled)

```go
func init() {
    if os.Getenv("ENV") == "production" {
        logx.EnableRedaction(true)
    }
}

func main() {
    logx.Info("Testing API call", "apikey", "SECRET1234")
}
```

‚úÖ Output (production)

```json
{
  "msg": "Testing API call",
  "apikey": "[REDACTED]"
}
```

---

## üîê Best Practice

* Default: **Enabled** (safety-first).
* Allow explicit **disable** in dev/local only.
* Optionally: auto-detect from `ENV`.

---

